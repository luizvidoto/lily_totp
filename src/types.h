#ifndef TYPES_H
#define TYPES_H

#include <stddef.h> // Para size_t
#include <stdint.h> // Para uintX_t
#include "config.h" // Para constantes de tamanho

// ---- Estruturas de Dados ----
struct TOTPService {
  char name[MAX_SERVICE_NAME_LEN + 1];
  char secret_b32[MAX_SECRET_B32_LEN + 1];
};

struct CurrentTOTPInfo {
  char code[7]; // "XXXXXX\0"
  uint32_t last_generated_interval;
  uint8_t key_bin[MAX_SECRET_BIN_LEN];
  size_t key_bin_len;
  bool valid_key;
};

struct BatteryInfo {
  float voltage;
  bool is_usb_powered;
  int level_percent; // 0-100
};

// ---- Estados da Aplicação ----
enum class ScreenState { // Usando enum class para melhor type safety
  SCREEN_TOTP_VIEW,
  SCREEN_MENU_MAIN,
  SCREEN_SERVICE_ADD_WAIT,
  SCREEN_SERVICE_ADD_CONFIRM,
  SCREEN_TIME_EDIT,
  SCREEN_SERVICE_DELETE_CONFIRM,
  SCREEN_TIMEZONE_EDIT,
  SCREEN_LANGUAGE_SELECT,
  SCREEN_MESSAGE,
  SCREEN_READ_RFID,
  SCREEN_STARTUP // Novo estado para inicialização
};

// ---- Internacionalização (i18n) ----
enum class Language { // Usando enum class
  LANG_PT_BR,
  LANG_EN_US,
  NUM_LANGUAGES // Deve ser o último
};

// IDs para todas as strings traduzíveis
enum class StringID {
  STR_TITLE_TOTP_CODE, STR_TITLE_MAIN_MENU, STR_TITLE_ADD_SERVICE, STR_TITLE_READ_RFID,
  STR_TITLE_CONFIRM_ADD, STR_TITLE_ADJUST_TIME, STR_TITLE_CONFIRM_DELETE,
  STR_TITLE_ADJUST_TIMEZONE, STR_TITLE_SELECT_LANGUAGE,
  STR_MENU_ADD_SERVICE, STR_MENU_READ_RFID_OPTION, STR_MENU_VIEW_CODES, STR_MENU_ADJUST_TIME,
  STR_MENU_ADJUST_TIMEZONE, STR_MENU_SELECT_LANGUAGE,
  STR_LANG_PORTUGUESE, STR_LANG_ENGLISH,
  STR_AWAITING_JSON, STR_VIA_SERIAL, STR_EXAMPLE_JSON_SERVICE, STR_EXAMPLE_JSON_TIME,
  STR_SERVICES_STATUS_FMT,
  STR_FOOTER_GENERIC_NAV, STR_FOOTER_CONFIRM_NAV, STR_FOOTER_TIME_EDIT_NAV,
  STR_FOOTER_TIMEZONE_NAV, STR_FOOTER_LANG_NAV,
  STR_TIME_EDIT_INFO_FMT, STR_TIME_EDIT_JSON_HINT, STR_TIMEZONE_LABEL,
  STR_CONFIRM_ADD_PROMPT, STR_CONFIRM_DELETE_PROMPT_FMT,
  STR_SERVICE_ADDED, STR_SERVICE_DELETED, STR_TIME_ADJUSTED_FMT, STR_TIMEZONE_SAVED_FMT,
  STR_LANG_SAVED,
  STR_ERROR_RTC_INIT, STR_ERROR_NO_SERVICES, STR_ERROR_JSON_PARSE_FMT,
  STR_ERROR_JSON_INVALID_SERVICE, STR_ERROR_JSON_INVALID_TIME,
  STR_ERROR_SERVICE_NAME_INVALID, STR_ERROR_SECRET_INVALID, STR_ERROR_SECRET_B32_CHARS,
  STR_ERROR_TIME_VALUES_INVALID, STR_ERROR_SAVING_SERVICE, STR_ERROR_DELETING_SERVICE,
  STR_ERROR_NVS_LOAD, STR_ERROR_NVS_SAVE, STR_ERROR_B32_DECODE, STR_ERROR_MAX_SERVICES,
  STR_TOTP_CODE_ERROR_PLACEHOLDER, STR_TOTP_NO_SERVICE_TITLE,
  STR_RFID_PROMPT, STR_RFID_ID_PREFIX, STR_STARTUP_MSG,
  NUM_STRINGS // Deve ser o último
};

struct LanguageStrings {
  const char *strings[static_cast<int>(StringID::NUM_STRINGS)];
};

#endif // TYPES_H